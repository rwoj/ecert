// how to start 
1. start ganache
2. setup ganache localhost/7545
3. truffle 
 C:\Users\radoslaw.wojdowski\AppData\Roaming\npm\truffle compile
 C:\Users\radoslaw.wojdowski\AppData\Roaming\npm\truffle migrate --network ganache --reset
4. change contract in Apps
5. cd client
  npm start
6. play

7. contracts/remix

mkdir ecert
cd ecert
truffle init
rename truffle.js truffle.js.old  // windows only
#truffle-config.js  // for windows, unix bez -config
  networks: {
    development: {
      host: "localhost",
      port: 8545,
      network_id: "*", // Match any network id
    }
  }

git add .   // all files
git commit -m "initial"
git remote add origin https://github.com/rwoj/ecert.git
git push -u origin master

#.gitignore // 
/client/node_modules

#contracts // add contracts tested in Remix
#2_deploy_contracts.js
var xxxContract = artifacts.require("./xxxContract.sol");

module.exports = function(deployer) {
  deployer.deploy(xxxContract);
};

#Truffle compile/migrate
truffle compile
truffle migrate 
//truffle migrate --reset

// create symlink - act as file/folder is there
# For MacOS and Linux
cd src
ln -s ../../build/contracts contracts
# For Windows 7, 8 and 10
# Using a Command Prompt as Admin
cd src
mklink /D contracts ..\..\build\contracts

create-react-app client
cd client
yarn add web3
#client/utils/getWeb3.js
#App.js changes
#components/containers




C:\Users\radoslaw.wojdowski\AppData\Roaming\npm\ganache-cli

C:\Users\radoslaw.wojdowski\AppData\Roaming\npm\truffle




I. SmartContracts 

I.1. SC design
    
I.2. SC program/compile/deploy/testing - Remix

    remix.ethereum.org

II. Test env setup

II.1. Test ethereum

$ npm install -g ethereumjs-testrpc
$ testrpc

II.2. Truffle
$ npm install -g truffle

II.3 Truffle project setup 

$ mkdir solidity-experiments
$ cd solidity-experiments/
$ truffle init 

II.4 Truffle network - truffle.js

  networks: {
    development: {
      host: "127.0.0.1",
      port: 8545,
      network_id: "*" // Match any network id
    }
  }

II.5 Contract create

truffle create contract xxxContract


II.6 Contract deploy file - migrations folder

2_deploy_contracts.js

var xxxContract = artifacts.require("./xxxContract.sol");

module.exports = function(deployer) {
  deployer.deploy(xxxContract);
};

II.7 Truffle compile/migrate

truffle compile
truffle migrate 
//truffle migrate --reset

II.8 Truffle console

truffle console

II'. Setting dev - drizzle & react

npm i -g truffle

npm i -g ganache-cli

npm i -g create-react-app

// VSC git setup

# new repo
github.com - new repo

# see github section

// only if not cloned from git 
mkdir drizzle-react-tutorial

cd drizzle-react-tutorial

truffle init

// run test network - mine every 3 sec

ganache-cli -b 3

// write contract 

truffle compile

// network setup truffle.js

module.exports = {
  networks: {
    development: {
      host: "localhost",
      port: 8545,
      network_id: "*" // Match any network id
    }
  }
};

// migrations 2_deploy_contracts.js
const MyStringStore = artifacts.require("MyStringStore");

module.exports = function(deployer) {
  deployer.deploy(MyStringStore);
};

truffle migrate

// write tests

truffle test

// bootstrap react project

create-react-app client

// create symlink - act as file/folder is there

# For MacOS and Linux

cd src
ln -s ../../build/contracts contracts

# For Windows 7, 8 and 10
# Using a Command Prompt as Admin

cd src
mklink \D contracts ..\..\build\contracts

// drizzle

npm i drizzle


III. DApp build

#index.js
// import drizzle functions and contract artifact
import { Drizzle, generateStore } from "drizzle";
import CertyficateCreator from "./contracts/CertyficateCreator.json";

// let drizzle know what contracts we want
const options = { contracts: [CertyficateCreator] };

// setup the drizzle store and drizzle
const drizzleStore = generateStore(options);
const drizzle = new Drizzle(options, drizzleStore);

// pass in the drizzle instance
ReactDOM.render(<App drizzle={drizzle} />, document.getElementById("root"));

#App.js
// import drizzle functions and contract artifact
import { Drizzle, generateStore } from "drizzle";
import myContract from "./contracts/myContract.json";

// let drizzle know what contracts we want
const options = { contracts: [myContract] };

// setup the drizzle store and drizzle
const drizzleStore = generateStore(options);
const drizzle = new Drizzle(options, drizzleStore);

// pass in the drizzle instance
ReactDOM.render(<App drizzle={drizzle} />, document.getElementById("root"));






IX. Git 

#config
git config --global user.name "rwoj"
git config --global user.email "rwoj@poczta.onet.pl"

#repo
git init .  // current repo
// git status
git add .   // all files
git commit -m "jakas wiadomosc"
// git log
git remote add origin https://github.com/rwoj/projekt.git
git push -u origin master
// may be files
git pull origin master --allow-unrelated-histories
git merge origin origin/master
git push -u origin master


